// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  images        ProcessedImage[]
  payments      Payment[]
  subscription  Subscription?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ProcessedImage {
  id              String   @id @default(cuid())
  userId          String
  originalUrl     String
  processedUrl    String
  thumbnailUrl    String?
  imageType       String   // 'person' or 'person-pet'
  status          String   @default("processing") // processing, completed, failed
  watermarkId     String?  // Unique watermark identifier
  metadata        Json?    // Store additional metadata
  processingTime  Int?     // Time in milliseconds
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("processed_images")
}

model Payment {
  id              String   @id @default(cuid())
  userId          String?
  userEmail       String
  stripePaymentId String   @unique
  amount          Int      // Amount in cents
  currency        String   @default("usd")
  status          String   // succeeded, pending, failed
  plan            String   // basic, pro, vip
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userEmail])
  @@index([status])
  @@map("payments")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String?   @unique
  userEmail            String    @unique
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  stripeCustomerId     String?
  status               String    // active, canceled, past_due, etc.
  planType             String    // basic, pro, vip
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  canceledAt           DateTime?
  lastPaymentAt        DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userEmail])
  @@index([status])
  @@index([planType])
  @@map("subscriptions")
}

model Analytics {
  id          String   @id @default(cuid())
  event       String   // page_view, image_processed, payment_completed, etc.
  userId      String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([event])
  @@index([createdAt])
  @@map("analytics")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // IP address or user ID
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetAt])
  @@map("rate_limits")
}

model Job {
  id          String    @id
  userId      String
  type        String    // 'image_processing', etc.
  status      String    @default("queued") // queued, processing, completed, failed
  progress    Int       @default(0) // 0-100
  input       Json?     // Job input parameters
  result      Json?     // Job result data
  error       String?   // Error message if failed
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("jobs")
}

model CheckoutLog {
  id          String   @id @default(cuid())
  userEmail   String
  priceId     String
  planType    String
  sessionId   String   @unique
  status      String   // created, completed, failed
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userEmail])
  @@index([sessionId])
  @@index([status])
  @@map("checkout_logs")
}
