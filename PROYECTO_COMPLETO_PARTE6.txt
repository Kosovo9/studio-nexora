PROYECTO STUDIO NEXORA - CONTENIDO COMPLETO (PARTE 6)
========================================================

[src/components/ui/Toast.tsx]
```
'use client'

import React, { createContext, useContext, useState, useCallback } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { X, CheckCircle, AlertCircle, Info, AlertTriangle, Loader2 } from 'lucide-react'

export type ToastType = 'success' | 'error' | 'warning' | 'info' | 'loading'

export interface Toast {
  id: string
  type: ToastType
  title?: string
  message: string
  duration?: number
  action?: {
    label: string
    onClick: () => void
  }
}

interface ToastContextType {
  toasts: Toast[]
  addToast: (toast: Omit<Toast, 'id'>) => string
  removeToast: (id: string) => void
  updateToast: (id: string, updates: Partial<Toast>) => void
  clearAllToasts: () => void
  success: (message: string, options?: Partial<Toast>) => string
  error: (message: string, options?: Partial<Toast>) => string
  warning: (message: string, options?: Partial<Toast>) => string
  info: (message: string, options?: Partial<Toast>) => string
  loading: (message: string, options?: Partial<Toast>) => string
}

const ToastContext = createContext<ToastContextType | undefined>(undefined)

export function useToast() {
  const context = useContext(ToastContext)
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider')
  }
  return context
}

const toastIcons = {
  success: CheckCircle,
  error: AlertCircle,
  warning: AlertTriangle,
  info: Info,
  loading: Loader2,
}

const toastStyles = {
  success: 'bg-green-500/20 border-green-500/30 text-green-100',
  error: 'bg-red-500/20 border-red-500/30 text-red-100',
  warning: 'bg-yellow-500/20 border-yellow-500/30 text-yellow-100',
  info: 'bg-blue-500/20 border-blue-500/30 text-blue-100',
  loading: 'bg-purple-500/20 border-purple-500/30 text-purple-100',
}

function ToastItem({ toast, onRemove }: { toast: Toast; onRemove: (id: string) => void }) {
  const Icon = toastIcons[toast.type]

  React.useEffect(() => {
    if (toast.duration && toast.duration > 0 && toast.type !== 'loading') {
      const timer = setTimeout(() => {
        onRemove(toast.id)
      }, toast.duration)

      return () => clearTimeout(timer)
    }
  }, [toast.id, toast.duration, toast.type, onRemove])

  return (
    <motion.div
      initial={{ opacity: 0, y: 50, scale: 0.3 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: 20, scale: 0.5 }}
      transition={{ duration: 0.3, ease: 'easeOut' }}
      className={`
        relative max-w-sm w-full backdrop-blur-xl rounded-xl border p-4 shadow-lg
        ${toastStyles[toast.type]}
      `}
    >
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0">
          <Icon 
            className={`h-5 w-5 ${toast.type === 'loading' ? 'animate-spin' : ''}`} 
          />
        </div>
        
        <div className="flex-1 min-w-0">
          {toast.title && (
            <p className="text-sm font-medium mb-1">
              {toast.title}
            </p>
          )}
          <p className="text-sm opacity-90">
            {toast.message}
          </p>
          
          {toast.action && (
            <button
              onClick={toast.action.onClick}
              className="mt-2 text-sm font-medium underline hover:no-underline transition-all"
            >
              {toast.action.label}
            </button>
          )}
        </div>
        
        {toast.type !== 'loading' && (
          <button
            onClick={() => onRemove(toast.id)}
            className="flex-shrink-0 opacity-60 hover:opacity-100 transition-opacity"
          >
            <X className="h-4 w-4" />
          </button>
        )}
      </div>
    </motion.div>
  )
}

export function ToastProvider({ children }: { children: React.ReactNode }) {
  const [toasts, setToasts] = useState<Toast[]>([])

  const addToast = useCallback((toast: Omit<Toast, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9)
    const newToast: Toast = {
      id,
      duration: 5000,
      ...toast,
    }
    
    setToasts(prev => [...prev, newToast])
    return id
  }, [])

  const removeToast = useCallback((id: string) => {
    setToasts(prev => prev.filter(toast => toast.id !== id))
  }, [])

  const updateToast = useCallback((id: string, updates: Partial<Toast>) => {
    setToasts(prev => prev.map(toast => 
      toast.id === id ? { ...toast, ...updates } : toast
    ))
  }, [])

  const clearAllToasts = useCallback(() => {
    setToasts([])
  }, [])

  const success = useCallback((message: string, options?: Partial<Toast>) => {
    return addToast({ type: 'success', message, ...options })
  }, [addToast])

  const error = useCallback((message: string, options?: Partial<Toast>) => {
    return addToast({ type: 'error', message, ...options })
  }, [addToast])

  const warning = useCallback((message: string, options?: Partial<Toast>) => {
    return addToast({ type: 'warning', message, ...options })
  }, [addToast])

  const info = useCallback((message: string, options?: Partial<Toast>) => {
    return addToast({ type: 'info', message, ...options })
  }, [addToast])

  const loading = useCallback((message: string, options?: Partial<Toast>) => {
    return addToast({ type: 'loading', message, duration: 0, ...options })
  }, [addToast])

  const value: ToastContextType = {
    toasts,
    addToast,
    removeToast,
    updateToast,
    clearAllToasts,
    success,
    error,
    warning,
    info,
    loading,
  }

  return (
    <ToastContext.Provider value={value}>
      {children}
      <ToastContainer toasts={toasts} onRemove={removeToast} />
    </ToastContext.Provider>
  )
}

function ToastContainer({ 
  toasts, 
  onRemove 
}: { 
  toasts: Toast[]
  onRemove: (id: string) => void 
}) {
  return (
    <div className="fixed top-4 right-4 z-50 flex flex-col gap-2 max-w-sm w-full">
      <AnimatePresence>
        {toasts.map((toast) => (
          <ToastItem
            key={toast.id}
            toast={toast}
            onRemove={onRemove}
          />
        ))}
      </AnimatePresence>
    </div>
  )
}

// Helper functions for easy usage
export { addToast, removeToast, updateToast, clearAllToasts, success, error, warning, info, loading } from './Toast'

// Export individual helper functions
export const addToast = (toast: Omit<Toast, 'id'>) => {
  // This would need to be implemented with a global toast manager
  console.warn('addToast called outside of ToastProvider context')
  return ''
}

export const removeToast = (id: string) => {
  console.warn('removeToast called outside of ToastProvider context')
}

export const updateToast = (id: string, updates: Partial<Toast>) => {
  console.warn('updateToast called outside of ToastProvider context')
}

export const clearAllToasts = () => {
  console.warn('clearAllToasts called outside of ToastProvider context')
}

export const success = (message: string, options?: Partial<Toast>) => {
  console.warn('success called outside of ToastProvider context')
  return ''
}

export const error = (message: string, options?: Partial<Toast>) => {
  console.warn('error called outside of ToastProvider context')
  return ''
}

export const warning = (message: string, options?: Partial<Toast>) => {
  console.warn('warning called outside of ToastProvider context')
  return ''
}

export const info = (message: string, options?: Partial<Toast>) => {
  console.warn('info called outside of ToastProvider context')
  return ''
}

export const loading = (message: string, options?: Partial<Toast>) => {
  console.warn('loading called outside of ToastProvider context')
  return ''
}
```

[src/components/ui/Tabs.tsx]
```
'use client'

import React, { createContext, useContext, useState } from 'react'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'

interface TabsContextType {
  activeTab: string
  setActiveTab: (value: string) => void
}

const TabsContext = createContext<TabsContextType | undefined>(undefined)

function useTabsContext() {
  const context = useContext(TabsContext)
  if (!context) {
    throw new Error('Tabs components must be used within a Tabs provider')
  }
  return context
}

interface TabsProps {
  defaultValue: string
  children: React.ReactNode
  className?: string
  onValueChange?: (value: string) => void
}

export function Tabs({ defaultValue, children, className, onValueChange }: TabsProps) {
  const [activeTab, setActiveTab] = useState(defaultValue)

  const handleTabChange = (value: string) => {
    setActiveTab(value)
    onValueChange?.(value)
  }

  return (
    <TabsContext.Provider value={{ activeTab, setActiveTab: handleTabChange }}>
      <div className={cn('w-full', className)}>
        {children}
      </div>
    </TabsContext.Provider>
  )
}

interface TabsListProps {
  children: React.ReactNode
  className?: string
}

export function TabsList({ children, className }: TabsListProps) {
  return (
    <div className={cn(
      'inline-flex h-10 items-center justify-center rounded-xl bg-white/10 p-1 border border-white/20',
      className
    )}>
      {children}
    </div>
  )
}

interface TabsTriggerProps {
  value: string
  children: React.ReactNode
  className?: string
  disabled?: boolean
}

export function TabsTrigger({ value, children, className, disabled }: TabsTriggerProps) {
  const { activeTab, setActiveTab } = useTabsContext()
  const isActive = activeTab === value

  return (
    <button
      onClick={() => !disabled && setActiveTab(value)}
      disabled={disabled}
      className={cn(
        'relative inline-flex items-center justify-center whitespace-nowrap rounded-lg px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
        isActive 
          ? 'text-white shadow-sm' 
          : 'text-purple-200 hover:text-white',
        className
      )}
    >
      {isActive && (
        <motion.div
          layoutId="activeTab"
          className="absolute inset-0 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg"
          initial={false}
          transition={{ type: "spring", bounce: 0.2, duration: 0.6 }}
        />
      )}
      <span className="relative z-10">{children}</span>
    </button>
  )
}

interface TabsContentProps {
  value: string
  children: React.ReactNode
  className?: string
}

export function TabsContent({ value, children, className }: TabsContentProps) {
  const { activeTab } = useTabsContext()
  
  if (activeTab !== value) {
    return null
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
      transition={{ duration: 0.2 }}
      className={cn('mt-4', className)}
    >
      {children}
    </motion.div>
  )
}
```

[src/components/ui/Card.tsx]
```
'use client'

import React from 'react'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'

interface CardProps {
  children: React.ReactNode
  className?: string
  hover?: boolean
  gradient?: boolean
}

export function Card({ children, className, hover = true, gradient = false }: CardProps) {
  return (
    <motion.div
      whileHover={hover ? { y: -2, scale: 1.02 } : undefined}
      transition={{ duration: 0.2 }}
      className={cn(
        'rounded-xl border border-white/20 backdrop-blur-xl shadow-lg',
        gradient 
          ? 'bg-gradient-to-br from-white/10 to-white/5' 
          : 'bg-white/10',
        className
      )}
    >
      {children}
    </motion.div>
  )
}

interface CardHeaderProps {
  children: React.ReactNode
  className?: string
}

export function CardHeader({ children, className }: CardHeaderProps) {
  return (
    <div className={cn('p-6 pb-0', className)}>
      {children}
    </div>
  )
}

interface CardTitleProps {
  children: React.ReactNode
  className?: string
}

export function CardTitle({ children, className }: CardTitleProps) {
  return (
    <h3 className={cn('text-lg font-semibold text-white', className)}>
      {children}
    </h3>
  )
}

interface CardDescriptionProps {
  children: React.ReactNode
  className?: string
}

export function CardDescription({ children, className }: CardDescriptionProps) {
  return (
    <p className={cn('text-sm text-purple-200 mt-1', className)}>
      {children}
    </p>
  )
}

interface CardContentProps {
  children: React.ReactNode
  className?: string
}

export function CardContent({ children, className }: CardContentProps) {
  return (
    <div className={cn('p-6', className)}>
      {children}
    </div>
  )
}

interface CardFooterProps {
  children: React.ReactNode
  className?: string
}

export function CardFooter({ children, className }: CardFooterProps) {
  return (
    <div className={cn('p-6 pt-0', className)}>
      {children}
    </div>
  )
}
```

[src/components/ui/Badge.tsx]
```
'use client'

import React from 'react'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'

interface BadgeProps {
  children: React.ReactNode
  variant?: 'default' | 'secondary' | 'success' | 'warning' | 'error' | 'outline'
  size?: 'sm' | 'md' | 'lg'
  className?: string
  animate?: boolean
}

const variantStyles = {
  default: 'bg-gradient-to-r from-purple-500 to-blue-500 text-white',
  secondary: 'bg-white/20 text-purple-100 border border-white/30',
  success: 'bg-green-500/20 text-green-100 border border-green-500/30',
  warning: 'bg-yellow-500/20 text-yellow-100 border border-yellow-500/30',
  error: 'bg-red-500/20 text-red-100 border border-red-500/30',
  outline: 'border border-white/30 text-white bg-transparent',
}

const sizeStyles = {
  sm: 'px-2 py-0.5 text-xs',
  md: 'px-2.5 py-1 text-sm',
  lg: 'px-3 py-1.5 text-base',
}

export function Badge({ 
  children, 
  variant = 'default', 
  size = 'md', 
  className,
  animate = false 
}: BadgeProps) {
  const Component = animate ? motion.span : 'span'
  const animationProps = animate ? {
    initial: { scale: 0.8, opacity: 0 },
    animate: { scale: 1, opacity: 1 },
    transition: { duration: 0.2 }
  } : {}

  return (
    <Component
      {...animationProps}
      className={cn(
        'inline-flex items-center rounded-full font-medium',
        variantStyles[variant],
        sizeStyles[size],
        className
      )}
    >
      {children}
    </Component>
  )
}
```

[src/components/ui/Progress.tsx]
```
'use client'

import React from 'react'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'

interface ProgressProps {
  value: number // 0-100
  className?: string
  showLabel?: boolean
  size?: 'sm' | 'md' | 'lg'
  variant?: 'default' | 'success' | 'warning' | 'error'
}

const sizeStyles = {
  sm: 'h-1',
  md: 'h-2',
  lg: 'h-3',
}

const variantStyles = {
  default: 'from-purple-500 to-blue-500',
  success: 'from-green-500 to-emerald-500',
  warning: 'from-yellow-500 to-orange-500',
  error: 'from-red-500 to-pink-500',
}

export function Progress({ 
  value, 
  className, 
  showLabel = false, 
  size = 'md',
  variant = 'default'
}: ProgressProps) {
  const clampedValue = Math.min(100, Math.max(0, value))

  return (
    <div className={cn('w-full', className)}>
      {showLabel && (
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm text-purple-200">Progreso</span>
          <span className="text-sm text-white font-medium">{Math.round(clampedValue)}%</span>
        </div>
      )}
      
      <div className={cn(
        'w-full bg-white/10 rounded-full overflow-hidden',
        sizeStyles[size]
      )}>
        <motion.div
          className={cn(
            'h-full bg-gradient-to-r rounded-full',
            variantStyles[variant]
          )}
          initial={{ width: 0 }}
          animate={{ width: `${clampedValue}%` }}
          transition={{ duration: 0.5, ease: 'easeOut' }}
        />
      </div>
    </div>
  )
}
```

[src/components/ui/Switch.tsx]
```
'use client'

import React from 'react'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'

interface SwitchProps {
  checked: boolean
  onCheckedChange: (checked: boolean) => void
  disabled?: boolean
  size?: 'sm' | 'md' | 'lg'
  className?: string
  label?: string
}

const sizeStyles = {
  sm: {
    track: 'w-8 h-4',
    thumb: 'w-3 h-3',
    translate: 'translate-x-4',
  },
  md: {
    track: 'w-11 h-6',
    thumb: 'w-5 h-5',
    translate: 'translate-x-5',
  },
  lg: {
    track: 'w-14 h-7',
    thumb: 'w-6 h-6',
    translate: 'translate-x-7',
  },
}

export function Switch({ 
  checked, 
  onCheckedChange, 
  disabled = false, 
  size = 'md',
  className,
  label 
}: SwitchProps) {
  const styles = sizeStyles[size]

  return (
    <div className={cn('flex items-center gap-2', className)}>
      <button
        type="button"
        role="switch"
        aria-checked={checked}
        disabled={disabled}
        onClick={() => onCheckedChange(!checked)}
        className={cn(
          'relative inline-flex shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-transparent disabled:cursor-not-allowed disabled:opacity-50',
          styles.track,
          checked 
            ? 'bg-gradient-to-r from-purple-500 to-blue-500' 
            : 'bg-white/20'
        )}
      >
        <motion.span
          className={cn(
            'pointer-events-none inline-block rounded-full bg-white shadow-lg ring-0 transition duration-200 ease-in-out',
            styles.thumb
          )}
          animate={{
            x: checked ? styles.translate.replace('translate-x-', '') : '0',
          }}
          transition={{ type: 'spring', stiffness: 500, damping: 30 }}
        />
      </button>
      
      {label && (
        <label 
          className="text-sm text-purple-200 cursor-pointer"
          onClick={() => !disabled && onCheckedChange(!checked)}
        >
          {label}
        </label>
      )}
    </div>
  )
}
```

[src/components/ui/Slider.tsx]
```
'use client'

import React, { useState, useRef } from 'react'
import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'

interface SliderProps {
  value: number[]
  onValueChange: (value: number[]) => void
  min?: number
  max?: number
  step?: number
  disabled?: boolean
  className?: string
  showValue?: boolean
}

export function Slider({
  value,
  onValueChange,
  min = 0,
  max = 100,
  step = 1,
  disabled = false,
  className,
  showValue = false,
}: SliderProps) {
  const [isDragging, setIsDragging] = useState(false)
  const trackRef = useRef<HTMLDivElement>(null)

  const currentValue = value[0] || min
  const percentage = ((currentValue - min) / (max - min)) * 100

  const handleMouseDown = (e: React.MouseEvent) => {
    if (disabled) return
    setIsDragging(true)
    updateValue(e)
  }

  const handleMouseMove = (e: MouseEvent) => {
    if (!isDragging || disabled) return
    updateValue(e)
  }

  const handleMouseUp = () => {
    setIsDragging(false)
  }

  const updateValue = (e: MouseEvent | React.MouseEvent) => {
    if (!trackRef.current) return

    const rect = trackRef.current.getBoundingClientRect()
    const percentage = Math.max(0, Math.min(1, (e.clientX - rect.left) / rect.width))
    const newValue = min + percentage * (max - min)
    const steppedValue = Math.round(newValue / step) * step
    
    onValueChange([Math.max(min, Math.min(max, steppedValue))])
  }

  React.useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove)
      document.addEventListener('mouseup', handleMouseUp)
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove)
        document.removeEventListener('mouseup', handleMouseUp)
      }
    }
  }, [isDragging])

  return (
    <div className={cn('relative w-full', className)}>
      {showValue && (
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm text-purple-200">Valor</span>
          <span className="text-sm text-white font-medium">{currentValue}</span>
        </div>
      )}
      
      <div
        ref={trackRef}
        className="relative h-2 w-full cursor-pointer rounded-full bg-white/20"
        onMouseDown={handleMouseDown}
      >
        {/* Progress track */}
        <div
          className="absolute h-full bg-gradient-to-r from-purple-500 to-blue-500 rounded-full"
          style={{ width: `${percentage}%` }}
        />
        
        {/* Thumb */}
        <motion.div
          className={cn(
            'absolute top-1/2 w-5 h-5 -mt-2.5 -ml-2.5 bg-white rounded-full shadow-lg border-2 border-purple-500 cursor-grab',
            isDragging && 'cursor-grabbing scale-110',
            disabled && 'opacity-50 cursor-not-allowed'
          )}
          style={{ left: `${percentage}%` }}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 1.2 }}
        />
      </div>
    </div>
  )
}
```